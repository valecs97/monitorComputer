using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace Monitor_Computer
{
    class NetworkingServer
    {
        private MainWindow mainWindowClass;
        public sendCommandsServer sendCommandsServerClass;
        public NetworkingServer(MainWindow mainWindowClass)
        {
            sendCommandsServerClass = new sendCommandsServer(this,mainWindowClass);
            this.mainWindowClass = mainWindowClass;
        }
        private bool isConnected = false;
//        private bool monitoringCpuRam = false;
        private bool canConnect = false;
        private bool closeCommand = false;
        NetworkStream networkStream;
        TcpListener server;
        TcpClient client = default(TcpClient);
        public bool startPort()
        {
            server = new TcpListener(System.Net.IPAddress.Any, mainWindowClass.serverPort);
            try
            {
                server.Start();
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
                return false;
            }
        }
        public void openServer()
        {
                checkClient();
                while (isConnected)
                {
                    try
                    {
                    networkStream = client.GetStream();
                        byte[] byteFrom = new byte[100250];
                        networkStream.Read(byteFrom, 0, (int)client.ReceiveBufferSize);
                        string dataFromClient = System.Text.Encoding.ASCII.GetString(byteFrom);
                        dataFromClient = dataFromClient.Substring(0, dataFromClient.IndexOf("$"));
                        
                        if (dataFromClient == "Closes")
                        {
                            closeServer();
                            isConnected = false;
                        }
                        string command = dataFromClient.Substring(0, 6);
                            switch (command)
                        {
                            case "strmnt" :
                            {
                                
                                command = dataFromClient.Substring(6);
                                int i = 0;
                                string aux = "";
                                while (command[i] != ' ')
                                {
                                    aux += command[i];
                                    i++;
                                }
                                //MessageBox.Show(aux);
                                sendCommandsServerClass.warningCpu = Int32.Parse(aux);
                                //MessageBox.Show(sendCommandsServerClass.warningRAM);
                                aux = "";
                                i++;
                                while (command[i] != ' ')
                                {
                                    aux += command[i];
                                    i++;
                                }
                                sendCommandsServerClass.warningRAM = Int32.Parse(aux);
                                aux = "";
                                i++;
                                while (command[i] != ' ')
                                {
                                    aux += command[i];
                                    i++;
                                }
                                sendCommandsServerClass.warningTime = Int32.Parse(aux);
                                sendCommandsServerClass.monitoringStatus = true;
                                Thread startMonitoring = new Thread(sendCommandsServerClass.startMonitoring);
                                startMonitoring.Start();
                            };
                            break;
                            case "strchg":
                            {
                                command = dataFromClient.Substring(6);
                                int i = 0;
                                string aux = "";
                                while (command[i] != ' ')
                                {
                                    aux += command[i];
                                    i++;
                                }
                                //MessageBox.Show(aux);
                                if(sendCommandsServerClass.warningCpu != Int32.Parse(aux))
                                {
                                    sendCommandsServerClass.warningCpu = Int32.Parse(aux);
                                    sendCommandsServerClass.hintsCpu = 0;
                                }
                                //MessageBox.Show(sendCommandsServerClass.warningRAM);
                                aux = "";
                                i++;
                                while (command[i] != ' ')
                                {
                                    aux += command[i];
                                    i++;
                                }
                                if(sendCommandsServerClass.warningRAM != Int32.Parse(aux))
                                {
                                    sendCommandsServerClass.warningRAM = Int32.Parse(aux);
                                    sendCommandsServerClass.hintsRam = 0;
                                }
                                aux = "";
                                i++;
                                while (command[i] != ' ')
                                {
                                    aux += command[i];
                                    i++;
                                }
                                if (sendCommandsServerClass.warningTime != Int32.Parse(aux))
                                {
                                    sendCommandsServerClass.warningTime = Int32.Parse(aux);
                                    sendCommandsServerClass.hintsCpu = 0;
                                    sendCommandsServerClass.hintsRam = 0;
                                }
                            }; break;
                            case "stpmnt": sendCommandsServerClass.monitoringStatus = false; break;
                            case "closec": sendCommandsServerClass.closeComputer(); break;
                        }
                    
                }
                    catch (Exception)
                    {
                    isConnected = false;
                    }
                }
                sendCommandsServerClass.monitoringStatus = false;
                client.Close();
                if (mainWindowClass.keepServerOnAfterClient)
                    openServer();
            server.Stop();
            mainWindowClass.restoreConnectPage1Default();
        }

        public bool checkCpuRam()
        {
            return sendCommandsServerClass.monitoringStatus;
        }

        public void forceCloseCpuRam()
        {
            sendCommandsServerClass.monitoringStatus = false;
        }
        
        private void checkClient()
        {
            canConnect = false;
            isConnected = false;
            closeCommand = false;
            mainWindowClass.statusControl.Dispatcher.Invoke(new Action(() => mainWindowClass.statusControl.Content = "Status : waiting for user"));
            while (!canConnect)
            {
                client = server.AcceptTcpClient();
                try
                {
                    networkStream = client.GetStream();
                    byte[] byteFrom = new byte[100250];
                    networkStream.Read(byteFrom, 0, (int)client.ReceiveBufferSize);
                    string dataFromClient = System.Text.Encoding.ASCII.GetString(byteFrom);
                    dataFromClient = dataFromClient.Substring(0, dataFromClient.IndexOf("$"));
                    if (dataFromClient == mainWindowClass.serverPassword)
                    {
                        isConnected = true;
                        canConnect = true;
                        mainWindowClass.notification("Somebody has connected to your computer !");
                        networkStream = client.GetStream();
                        string serverResponse = "YouShallPass" + "$";
                        Byte[] sendBytes = Encoding.ASCII.GetBytes(serverResponse);
                        networkStream.Write(sendBytes, 0, sendBytes.Length);
                        networkStream.Flush();
                        mainWindowClass.statusControl.Dispatcher.Invoke(new Action(() => mainWindowClass.statusControl.Content = "Status : online"));
                    }
                    else
                    {
                        networkStream = client.GetStream();
                        string serverResponse = "YouShallNotPass" + "$";
                        Byte[] sendBytes = Encoding.ASCII.GetBytes(serverResponse);
                        networkStream.Write(sendBytes, 0, sendBytes.Length);
                        networkStream.Flush();
                    }
                    if (!canConnect)
                        client.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
            }
        }
        public void sendCommand(string dataToSend)
        {
            try {
                networkStream = client.GetStream();
                string serverResponse = dataToSend + "$";
                Byte[] sendBytes = Encoding.ASCII.GetBytes(serverResponse);
                networkStream.Write(sendBytes, 0, sendBytes.Length);
                networkStream.Flush();
            }
            catch (Exception)
            {
                sendCommandsServerClass.monitoringStatus = false;
            }
        }

        public void closeServer()
        {
            string statusCheck="";
            try {
                mainWindowClass.statusControl.Dispatcher.Invoke(new Action(() => statusCheck = mainWindowClass.statusControl.Content.ToString()));
            }
            catch (TaskCanceledException)
            { };
            if (checkCpuRam())
            {
                forceCloseCpuRam();
                
            }
            if (statusCheck== "Status : waiting for user")
            {
                    canConnect = true;
                    NetworkStream server;
                    System.Net.Sockets.TcpClient client = new System.Net.Sockets.TcpClient();
                    client = new TcpClient();
                    client.Connect("localhost", mainWindowClass.serverPort);
                    server = client.GetStream();
                    byte[] outStream = System.Text.Encoding.ASCII.GetBytes("I hope no one will use this password... P.S reeallyyy hopeeee" + "$");
                    server.Write(outStream, 0, (int)outStream.Length);
                    server.Flush();
                    try {
                        mainWindowClass.Dispatcher.Invoke(new Action(() => mainWindowClass.statusControl.Content = "Status : offline"));
                    }
                    catch (TaskCanceledException)
                    { };
            }
            else if (statusCheck == "Status : online" && !closeCommand)
            {
                try {
                    mainWindowClass.Dispatcher.Invoke(new Action(() => mainWindowClass.statusControl.Content = "Status : offline"));
                }
                catch (TaskCanceledException)
                { };
                closeCommand = true;
                sendCommand("Closes");
            }
        }
    }
}
