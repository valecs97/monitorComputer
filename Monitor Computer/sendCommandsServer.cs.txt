using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace Monitor_Computer
{
    class sendCommandsServer
    {
        private NetworkingServer networkingServerClass;
        private MainWindow mainWindowClass;
        public int hintsCpu, hintsRam;
        public sendCommandsServer(NetworkingServer networkingServerClass,MainWindow mainWindowClass)
        {
            this.networkingServerClass = networkingServerClass;
            this.mainWindowClass = mainWindowClass;
        }

        //HERE STARTS THE RAM/CPU MONITORING

        public int warningCpu, warningRAM, warningTime;
        public bool monitoringStatus = false;

        private float getCPUCounter()
        {

            PerformanceCounter cpuCounter = new PerformanceCounter();
            cpuCounter.CategoryName = "Processor";
            cpuCounter.CounterName = "% Processor Time";
            cpuCounter.InstanceName = "_Total";
            dynamic firstValue = cpuCounter.NextValue();
            System.Threading.Thread.Sleep(750);
            dynamic secondValue = cpuCounter.NextValue();
            return secondValue;

        }

        private float getRAMAvailable()
        {
            PerformanceCounter ramCounter = new PerformanceCounter("Memory", "Available MBytes");
            dynamic firstValue = ramCounter.NextValue();
            return firstValue;
        }
        public void startMonitoring()
        {
            hintsCpu = 0;
            hintsRam = 0;
            while (monitoringStatus)
            {
                string toSend="mntsts";
                float cpu = getCPUCounter();
                cpu = (float)Math.Round(cpu, 2);
                float ram = getRAMAvailable();
                toSend += cpu.ToString();
                toSend += " ";
                toSend += ram.ToString();
                toSend += " ";
                if (cpu >= warningCpu)
                    hintsCpu++;
                else
                    hintsCpu = 0;
                if (hintsCpu == warningTime)
                {
                    toSend += "y";
                    toSend += " ";
                    hintsCpu = -60 + warningTime;
                }
                else
                {
                    toSend += "n";
                    toSend += " ";
                }
                if (ram <= warningRAM)
                    hintsRam++;
                else
                    hintsRam = 0;
                if (hintsRam == warningTime)
                {
                    toSend += "y";
                    toSend += " ";
                    hintsRam = -60 + warningTime;
                }
                else
                {
                    toSend += "n";
                    toSend += " ";
                }
                if (monitoringStatus)
                    networkingServerClass.sendCommand(toSend);
            }
            networkingServerClass.sendCommand("stpmnt");
        }

        //HERE ENDS THE CPU/RAM MONITORING

        //HERE BEGINS CLOSE COMPUTER


        public void closeComputer()
        {
            mainWindowClass.stopServer();
            var psi = new ProcessStartInfo("shutdown", "/s /t 0");
            psi.CreateNoWindow = true;
            psi.UseShellExecute = false;
            Process.Start(psi);
        }

        //HERE ENDS CLOSE COMPUTER
    }
}
